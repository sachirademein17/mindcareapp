name: Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job 1: Unit and Integration Tests
  unit-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
    
    - name: Run ESLint
      run: |
        cd frontend && npm run lint
        cd ../backend && npm run lint
    
    - name: Run unit tests (Frontend)
      run: cd frontend && npm run test:coverage
    
    - name: Run unit tests (Backend)
      run: cd backend && npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  # Job 2: Security Testing
  security-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
    
    - name: Run npm audit
      run: |
        cd frontend && npm audit --audit-level=moderate
        cd ../backend && npm audit --audit-level=moderate
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: javascript

  # Job 3: End-to-End Tests
  e2e-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mentalhealth_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
    
    - name: Build frontend
      run: cd frontend && npm run build
    
    - name: Start backend server
      run: |
        cd backend && npm run dev &
        sleep 10
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: mentalhealth_test
        DB_USER: postgres
        DB_PASSWORD: postgres
    
    - name: Start frontend server
      run: |
        cd frontend && npm run preview &
        sleep 5
    
    - name: Install Playwright
      run: npx playwright install --with-deps
    
    - name: Run Playwright tests
      run: npx playwright test
    
    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  # Job 4: Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        cd frontend && npm ci
        cd ../backend && npm ci
    
    - name: Build and start servers
      run: |
        cd backend && npm run dev &
        cd frontend && npm run build && npm run preview &
        sleep 15
    
    - name: Install K6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run K6 performance tests
      run: k6 run tests/performance/load-test.js --out json=performance-results.json
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results.json

  # Job 5: Accessibility Tests
  accessibility-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: cd frontend && npm ci
    
    - name: Build frontend
      run: cd frontend && npm run build
    
    - name: Start frontend server
      run: |
        cd frontend && npm run preview &
        sleep 5
    
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Job 6: Generate Test Report
  test-report:
    runs-on: ubuntu-latest
    needs: [unit-tests, security-tests, e2e-tests, performance-tests, accessibility-tests]
    if: always()
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate comprehensive test report
      run: |
        echo "# 🧪 Comprehensive Test Report" > test-report.md
        echo "" >> test-report.md
        echo "## 📊 Test Results Summary" >> test-report.md
        echo "- ✅ Unit Tests: ${{ needs.unit-tests.result }}" >> test-report.md
        echo "- 🔒 Security Tests: ${{ needs.security-tests.result }}" >> test-report.md
        echo "- 🌐 E2E Tests: ${{ needs.e2e-tests.result }}" >> test-report.md
        echo "- ⚡ Performance Tests: ${{ needs.performance-tests.result }}" >> test-report.md
        echo "- ♿ Accessibility Tests: ${{ needs.accessibility-tests.result }}" >> test-report.md
        echo "" >> test-report.md
        echo "## 🎯 Overall Status" >> test-report.md
        if [[ "${{ needs.unit-tests.result }}" == "success" && "${{ needs.security-tests.result }}" == "success" && "${{ needs.e2e-tests.result }}" == "success" ]]; then
          echo "🟢 **PASSED** - All critical tests passed" >> test-report.md
        else
          echo "🔴 **FAILED** - Some tests failed, review required" >> test-report.md
        fi
    
    - name: Upload test report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-test-report
        path: test-report.md
